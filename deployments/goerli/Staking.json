{
  "address": "0x13d084429511DAaB9b46c0d516a7eCBA29445d9E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Staking_AlreadyFunded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking_NotAlreadyFunded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "initialFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IRewardToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_OwnerToStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_TotalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_isFunded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        }
      ],
      "name": "setRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setStakingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setStakingTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "stakerRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe31daf0bf8ba6741d60c343b71cdf9af077fc8fb6fc9dd25ba68b6bf21922b20",
  "receipt": {
    "to": null,
    "from": "0x522652EB897Ced74725218b4C33F6C3C1Caf525D",
    "contractAddress": "0x13d084429511DAaB9b46c0d516a7eCBA29445d9E",
    "transactionIndex": 31,
    "gasUsed": "1655740",
    "logsBloom": "0x
    "blockHash": "0xe83e13bdae76ffb83eafd073f45f8177b7508aa467a2956ae5982a4779af9c09",
    "transactionHash": "0xe31daf0bf8ba6741d60c343b71cdf9af077fc8fb6fc9dd25ba68b6bf21922b20",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 7761918,
        "transactionHash": "0xe31daf0bf8ba6741d60c343b71cdf9af077fc8fb6fc9dd25ba68b6bf21922b20",
        "address": "0x13d084429511DAaB9b46c0d516a7eCBA29445d9E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000522652eb897ced74725218b4c33f6c3c1caf525d"
        ],
        "data": "0x",
        "logIndex": 164,
        "blockHash": "0xe83e13bdae76ffb83eafd073f45f8177b7508aa467a2956ae5982a4779af9c09"
      }
    ],
    "blockNumber": 7761918,
    "cumulativeGasUsed": "12414547",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10000000000
  ],
  "numDeployments": 1,
  "solcInputHash": "62912e921f5ef913b1bc528c07d21e0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Staking_AlreadyFunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking_NotAlreadyFunded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initialFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IRewardToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_OwnerToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_TotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_isFunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setStakingTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakerRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setStakingTokenAddress(address)\":{\"details\":\"the inner mapping of owner=>balance resets everytime we change s_stakingTokenAddress on condition that tokenToOwnerToStake[s_stakingTokenAddress] is always used to access that owner=>balance mapping\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nerror Staking_TokenNotApproved();\\nerror Staking_AlreadyFunded();\\nerror Staking_NotAlreadyFunded();\\n\\ncontract Staking is Ownable {\\n    // initial fund\\n    // users stake tokens\\n    // users unstake tokens\\n    // reward users w/ tokens\\n\\n    event Staked(address indexed sender, address indexed token, uint256 amount);\\n\\n    struct Stake {\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    IERC20 public stakingToken;\\n    IRewardToken public rewardToken;\\n\\n    bool public s_isFunded;\\n    // rate the entire staking pool earns RWD per second, including the initial fund.\\n    //  However the initial fund does can not withdraw its share of reward tokens, they are just used in the calculation.\\n    uint256 public s_rewardRate;\\n    mapping(address => Stake[]) public s_OwnerToStake;\\n    Stake[] public s_TotalStakes;\\n    uint256 public s_totalStaked;\\n\\n    constructor(uint256 _rewardRate) {\\n        s_rewardRate = _rewardRate;\\n    }\\n\\n    modifier fundOnlyOnce() {\\n        if (s_isFunded == true) revert Staking_AlreadyFunded();\\n        _;\\n    }\\n\\n    modifier isFunded() {\\n        if (s_isFunded == false) revert Staking_NotAlreadyFunded();\\n        _;\\n    }\\n\\n    function setStakingToken(address token) public onlyOwner {\\n        stakingToken = IERC20(token);\\n    }\\n\\n    function setRewardToken(address token) public onlyOwner {\\n        rewardToken = IRewardToken(token);\\n    }\\n\\n    function addToTotalStake(uint256 amount) internal {\\n        uint256 len = s_TotalStakes.length;\\n        if (len == 0) {\\n            s_TotalStakes.push(Stake(amount, block.timestamp));\\n        } else if (s_TotalStakes[len - 1].timestamp < block.timestamp) {\\n            s_TotalStakes.push(\\n                Stake(s_TotalStakes[len - 1].amount + amount, block.timestamp)\\n            );\\n        } else if (s_TotalStakes[len - 1].timestamp == block.timestamp) {\\n            s_TotalStakes[len - 1].amount += amount;\\n        }\\n    }\\n\\n    function subtractFromTotalStake(uint256 amount) internal {\\n        uint256 len = s_TotalStakes.length;\\n        require(\\n            s_TotalStakes[len - 1].amount > amount,\\n            \\\"amount staked less than amount withdrawn\\\"\\n        );\\n        if (len == 0 || s_TotalStakes[len - 1].timestamp < block.timestamp) {\\n            s_TotalStakes.push(\\n                Stake(s_TotalStakes[len - 1].amount - amount, block.timestamp)\\n            );\\n        } else if (s_TotalStakes[len - 1].timestamp == block.timestamp) {\\n            s_TotalStakes[len - 1].amount -= amount;\\n        }\\n    }\\n\\n    /** @dev the inner mapping of owner=>balance resets everytime we change\\n     * s_stakingTokenAddress on condition that tokenToOwnerToStake[s_stakingTokenAddress]\\n     * is always used to access that owner=>balance mapping\\n     */\\n    function setStakingTokenAddress(address token) public onlyOwner {\\n        stakingToken = IERC20(token);\\n        s_isFunded = false;\\n    }\\n\\n    function setRewardRate(uint256 _rewardRate) public onlyOwner {\\n        s_rewardRate = _rewardRate;\\n    }\\n\\n    function initialFund(uint256 amount) public onlyOwner fundOnlyOnce {\\n        // tokenToOwnerToStake[s_stakingToken][msg.sender].push(\\n        //     Stake(amount, block.timestamp)\\n        // ); should the owner earn rewards for the initial fund?\\n        s_isFunded = true;\\n        s_totalStaked += amount;\\n        addToTotalStake(amount);\\n        s_OwnerToStake[address(0)].push(Stake(amount, block.timestamp));\\n        stakingToken.transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function stake(uint256 amount) public isFunded {\\n        addToTotalStake(amount);\\n        stakingToken.transferFrom(msg.sender, address(this), amount);\\n        s_totalStaked += amount;\\n        s_OwnerToStake[msg.sender].push(Stake(amount, block.timestamp));\\n        emit Staked(msg.sender, address(stakingToken), amount);\\n    }\\n\\n    function stakerRewards(address staker)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        Stake[] memory stakerHistory = s_OwnerToStake[staker];\\n\\n        uint256 stakerHistoryLen = stakerHistory.length;\\n        uint256[] memory rewards = new uint[](stakerHistoryLen);\\n        uint256 _reward;\\n\\n        //TODO : should be optimized\\n        for (uint i = 0; i < stakerHistoryLen; i++) {\\n            uint256 stakerAmount = stakerHistory[i].amount;\\n            uint256 stakerTimestamp = stakerHistory[i].timestamp;\\n            uint256 stakesLen = s_TotalStakes.length;\\n\\n            for (uint j = 0; j < stakesLen; j++) {\\n                uint256 totalTimestamp = s_TotalStakes[j].timestamp;\\n                if (\\n                    j + 1 < stakesLen &&\\n                    stakerTimestamp >= totalTimestamp &&\\n                    stakerTimestamp < s_TotalStakes[j + 1].timestamp\\n                ) {\\n                    _reward +=\\n                        (s_rewardRate *\\n                            stakerAmount *\\n                            (s_TotalStakes[j + 1].timestamp -\\n                                s_TotalStakes[j].timestamp)) /\\n                        s_TotalStakes[j].amount;\\n                } else if (j == stakesLen - 1) {\\n                    _reward +=\\n                        (s_rewardRate *\\n                            stakerAmount *\\n                            (block.timestamp - s_TotalStakes[j].timestamp)) /\\n                        s_TotalStakes[j].amount;\\n                }\\n\\n                rewards[i] = _reward;\\n            }\\n        }\\n        return rewards;\\n    }\\n\\n    // resets the staked timestamps to current timestamps and claims all rewards\\n    function claimRewards() public {\\n        uint256[] memory rewards = stakerRewards(msg.sender);\\n\\n        uint256 len = rewards.length;\\n        uint256 amountValidated;\\n        for (uint i = 0; i < len; i++) {\\n            amountValidated += rewards[i];\\n            // reseting timestamp resets reward calculation in stakerRewards()\\n            s_OwnerToStake[msg.sender][i].timestamp = block.timestamp;\\n        }\\n        rewardToken.mint(msg.sender, amountValidated);\\n    }\\n\\n    // should withdraw sender's stake starting from oldest & looping till amount is reached.\\n    function withdraw(uint256 amount) public {\\n        claimRewards();\\n        Stake[] memory history = s_OwnerToStake[msg.sender];\\n        uint256 len = history.length;\\n        uint256 validatedAmount;\\n        for (uint i = 0; i < len; i++) {\\n            if (amount < history[i].amount) {\\n                s_OwnerToStake[msg.sender][i].amount -= amount;\\n                validatedAmount += amount;\\n                break;\\n            }\\n            s_OwnerToStake[msg.sender][i].amount = 0;\\n            validatedAmount += amount;\\n        }\\n        stakingToken.transfer(msg.sender, validatedAmount);\\n    }\\n}\\n\\ninterface IRewardToken {\\n    function mint(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x2d21622f685ce927824187b6007f336a60fffc149834fe3dc33b7c0e213d187b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001dcf38038062001dcf833981810160405281019062000037919062000171565b620000576200004b6200006560201b60201c565b6200006d60201b60201c565b8060038190555050620001a3565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b6200014b8162000136565b81146200015757600080fd5b50565b6000815190506200016b8162000140565b92915050565b6000602082840312156200018a576200018962000131565b5b60006200019a848285016200015a565b91505092915050565b611c1c80620001b36000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063ef772a6011610071578063ef772a60146102ba578063f0d38070146102d8578063f0f0b228146102f6578063f2fde38b14610326578063f7c618c11461034257610121565b80638da5cb5b1461021757806398378485146102355780639e447fc614610251578063a694fc3a1461026d578063b5e011411461028957610121565b80633c5c53bd116100f45780633c5c53bd146101865780634731586f146101b7578063715018a6146101d357806372f702f3146101dd5780638aee8127146101fb57610121565b80631e9b12ef146101265780632e1a7d4d146101425780633179317d1461015e578063372500ab1461017c575b600080fd5b610140600480360381019061013b9190611526565b610360565b005b61015c60048036038101906101579190611589565b6103ac565b005b61016661065a565b60405161017391906115c5565b60405180910390f35b610184610660565b005b6101a0600480360381019061019b9190611589565b6107ba565b6040516101ae9291906115e0565b60405180910390f35b6101d160048036038101906101cc9190611589565b6107ee565b005b6101db6109b9565b005b6101e56109cd565b6040516101f29190611668565b60405180910390f35b61021560048036038101906102109190611526565b6109f3565b005b61021f610a3f565b60405161022c9190611692565b60405180910390f35b61024f600480360381019061024a9190611526565b610a68565b005b61026b60048036038101906102669190611589565b610acf565b005b61028760048036038101906102829190611589565b610ae1565b005b6102a3600480360381019061029e91906116ad565b610d10565b6040516102b19291906115e0565b60405180910390f35b6102c2610d51565b6040516102cf91906115c5565b60405180910390f35b6102e0610d57565b6040516102ed9190611708565b60405180910390f35b610310600480360381019061030b9190611526565b610d6a565b60405161031d91906117e1565b60405180910390f35b610340600480360381019061033b9190611526565b61110c565b005b61034a61118f565b6040516103579190611824565b60405180910390f35b6103686111b5565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6103b4610660565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561045b57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610415565b505050509050600081519050600080600090505b828110156105b25783818151811061048a5761048961183f565b5b6020026020010151600001518510156105295784600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106104ef576104ee61183f565b5b9060005260206000209060020201600001600082825461050f919061189d565b92505081905550848261052291906118d1565b91506105b2565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061057c5761057b61183f565b5b906000526020600020906002020160000181905550848261059d91906118d1565b915080806105aa90611905565b91505061046f565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161061092919061194d565b6020604051808303816000875af115801561062f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065391906119a2565b5050505050565b60035481565b600061066b33610d6a565b9050600081519050600080600090505b82811015610725578381815181106106965761069561183f565b5b6020026020010151826106a991906118d1565b915042600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106106fd576106fc61183f565b5b906000526020600020906002020160010181905550808061071d90611905565b91505061067b565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b815260040161078392919061194d565b600060405180830381600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b50505050505050565b600581815481106107ca57600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b6107f66111b5565b60011515600260149054906101000a900460ff16151503610843576040517fbf0aab3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260146101000a81548160ff021916908315150217905550806006600082825461087091906118d1565b9250508190555061088081611233565b600460008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040528083815260200142815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610972939291906119cf565b6020604051808303816000875af1158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b591906119a2565b5050565b6109c16111b5565b6109cb60006113f7565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109fb6111b5565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a706111b5565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff02191690831515021790555050565b610ad76111b5565b8060038190555050565b60001515600260149054906101000a900460ff16151503610b2e576040517fb1d66a3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b3781611233565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610b96939291906119cf565b6020604051808303816000875af1158015610bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd991906119a2565b508060066000828254610bec91906118d1565b92505081905550600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040528083815260200142815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd783604051610d0591906115c5565b60405180910390a350565b60046020528160005260406000208181548110610d2c57600080fd5b9060005260206000209060020201600091509150508060000154908060010154905082565b60065481565b600260149054906101000a900460ff1681565b60606000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610e1357838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610dcd565b50505050905060008151905060008167ffffffffffffffff811115610e3b57610e3a611a06565b5b604051908082528060200260200182016040528015610e695781602001602082028036833780820191505090505b509050600080600090505b838110156110ff576000858281518110610e9157610e9061183f565b5b60200260200101516000015190506000868381518110610eb457610eb361183f565b5b60200260200101516020015190506000600580549050905060005b818110156110e857600060058281548110610eed57610eec61183f565b5b906000526020600020906002020160010154905082600183610f0f91906118d1565b108015610f1c5750808410155b8015610f5857506005600183610f3291906118d1565b81548110610f4357610f4261183f565b5b90600052602060002090600202016001015484105b156110195760058281548110610f7157610f7061183f565b5b90600052602060002090600202016000015460058381548110610f9757610f9661183f565b5b9060005260206000209060020201600101546005600185610fb891906118d1565b81548110610fc957610fc861183f565b5b906000526020600020906002020160010154610fe5919061189d565b86600354610ff39190611a35565b610ffd9190611a35565b6110079190611aa6565b8761101291906118d1565b96506110b4565b600183611026919061189d565b82036110b357600582815481106110405761103f61183f565b5b906000526020600020906002020160000154600583815481106110665761106561183f565b5b90600052602060002090600202016001015442611083919061189d565b866003546110919190611a35565b61109b9190611a35565b6110a59190611aa6565b876110b091906118d1565b96505b5b868887815181106110c8576110c761183f565b5b6020026020010181815250505080806110e090611905565b915050610ecf565b5050505080806110f790611905565b915050610e74565b5081945050505050919050565b6111146111b5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117a90611b5a565b60405180910390fd5b61118c816113f7565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6111bd6114bb565b73ffffffffffffffffffffffffffffffffffffffff166111db610a3f565b73ffffffffffffffffffffffffffffffffffffffff1614611231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122890611bc6565b60405180910390fd5b565b60006005805490509050600081036112a05760056040518060400160405280848152602001428152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550506113f3565b4260056001836112b0919061189d565b815481106112c1576112c061183f565b5b906000526020600020906002020160010154101561137057600560405180604001604052808460056001866112f6919061189d565b815481106113075761130661183f565b5b90600052602060002090600202016000015461132391906118d1565b8152602001428152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550506113f2565b426005600183611380919061189d565b815481106113915761139061183f565b5b906000526020600020906002020160010154036113f1578160056001836113b8919061189d565b815481106113c9576113c861183f565b5b906000526020600020906002020160000160008282546113e991906118d1565b925050819055505b5b5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114f3826114c8565b9050919050565b611503816114e8565b811461150e57600080fd5b50565b600081359050611520816114fa565b92915050565b60006020828403121561153c5761153b6114c3565b5b600061154a84828501611511565b91505092915050565b6000819050919050565b61156681611553565b811461157157600080fd5b50565b6000813590506115838161155d565b92915050565b60006020828403121561159f5761159e6114c3565b5b60006115ad84828501611574565b91505092915050565b6115bf81611553565b82525050565b60006020820190506115da60008301846115b6565b92915050565b60006040820190506115f560008301856115b6565b61160260208301846115b6565b9392505050565b6000819050919050565b600061162e611629611624846114c8565b611609565b6114c8565b9050919050565b600061164082611613565b9050919050565b600061165282611635565b9050919050565b61166281611647565b82525050565b600060208201905061167d6000830184611659565b92915050565b61168c816114e8565b82525050565b60006020820190506116a76000830184611683565b92915050565b600080604083850312156116c4576116c36114c3565b5b60006116d285828601611511565b92505060206116e385828601611574565b9150509250929050565b60008115159050919050565b611702816116ed565b82525050565b600060208201905061171d60008301846116f9565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61175881611553565b82525050565b600061176a838361174f565b60208301905092915050565b6000602082019050919050565b600061178e82611723565b611798818561172e565b93506117a38361173f565b8060005b838110156117d45781516117bb888261175e565b97506117c683611776565b9250506001810190506117a7565b5085935050505092915050565b600060208201905081810360008301526117fb8184611783565b905092915050565b600061180e82611635565b9050919050565b61181e81611803565b82525050565b60006020820190506118396000830184611815565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118a882611553565b91506118b383611553565b92508282039050818111156118cb576118ca61186e565b5b92915050565b60006118dc82611553565b91506118e783611553565b92508282019050808211156118ff576118fe61186e565b5b92915050565b600061191082611553565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036119425761194161186e565b5b600182019050919050565b60006040820190506119626000830185611683565b61196f60208301846115b6565b9392505050565b61197f816116ed565b811461198a57600080fd5b50565b60008151905061199c81611976565b92915050565b6000602082840312156119b8576119b76114c3565b5b60006119c68482850161198d565b91505092915050565b60006060820190506119e46000830186611683565b6119f16020830185611683565b6119fe60408301846115b6565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000611a4082611553565b9150611a4b83611553565b9250828202611a5981611553565b91508282048414831517611a7057611a6f61186e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611ab182611553565b9150611abc83611553565b925082611acc57611acb611a77565b5b828204905092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611b44602683611ad7565b9150611b4f82611ae8565b604082019050919050565b60006020820190508181036000830152611b7381611b37565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611bb0602083611ad7565b9150611bbb82611b7a565b602082019050919050565b60006020820190508181036000830152611bdf81611ba3565b905091905056fea2646970667358221220ed9fd20574d4dc0f2e993ac226c56ffbdf1f7b45167786d33ed030604920886064736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setStakingTokenAddress(address)": {
        "details": "the inner mapping of owner=>balance resets everytime we change s_stakingTokenAddress on condition that tokenToOwnerToStake[s_stakingTokenAddress] is always used to access that owner=>balance mapping"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 953,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakingToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)776"
      },
      {
        "astId": 956,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRewardToken)1630"
      },
      {
        "astId": 958,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_isFunded",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 960,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 966,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_OwnerToStake",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(Stake)950_storage)dyn_storage)"
      },
      {
        "astId": 970,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_TotalStakes",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Stake)950_storage)dyn_storage"
      },
      {
        "astId": 972,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_totalStaked",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Stake)950_storage)dyn_storage": {
        "base": "t_struct(Stake)950_storage",
        "encoding": "dynamic_array",
        "label": "struct Staking.Stake[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)776": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardToken)1630": {
        "encoding": "inplace",
        "label": "contract IRewardToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Stake)950_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Staking.Stake[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Stake)950_storage)dyn_storage"
      },
      "t_struct(Stake)950_storage": {
        "encoding": "inplace",
        "label": "struct Staking.Stake",
        "members": [
          {
            "astId": 947,
            "contract": "contracts/Staking.sol:Staking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 949,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}